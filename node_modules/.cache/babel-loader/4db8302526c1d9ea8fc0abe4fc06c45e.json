{"ast":null,"code":"var _jsxFileName = \"/Users/deontemanning/monsters-rolodex/src/App.js\";\nimport React, { Component } from 'react';\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport SearchForm from './components/search-form/search-form.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => {\n      this.setState({\n        searchField: e.target.value\n      });\n    };\n\n    this.state = {\n      monsters: [],\n      // initial state is empty we wait until fetch completes\n      searchField: ''\n    }; //Binding this to handelChange\n    // this.handleChange = this.handleChange.bind(this);\n  } //Waits until our component mounts\n\n\n  componentDidMount() {\n    //fetch returns a promise.\n    fetch('https://jsonplaceholder.typicode.com/users') //returns a new promise\n    .then(response => response.json()).then(users => this.setState({\n      monsters: users\n    })); //fills monsters state\n  } // handleChange(e){\n  //   //Will not work because this is not set within a function. \n  //   //this has to be bound to the app component in our constructor\n  //   this.setState({searchField: e.target.value});\n  // }\n\n\n  render() {\n    // const monsters = this.state.monsters;\n    // const searchField = this.state.searchField;\n    //Destructruing is an easeir way of doing the above.\n    //Destrucuting allows you to pull properties from an object and set them to variables.\n    const _this$state = this.state,\n          monsters = _this$state.monsters,\n          searchField = _this$state.searchField;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(SearchForm, {\n      className: \"search\",\n      type: \"search\",\n      placeholder: \"Search Monsters....\",\n      handleChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(CardList, {\n      monsters: filteredMonsters,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/deontemanning/monsters-rolodex/src/App.js"],"names":["React","Component","CardList","SearchForm","App","constructor","handleChange","e","setState","searchField","target","value","state","monsters","componentDidMount","fetch","then","response","json","users","render","filteredMonsters","filter","monster","name","toLowerCase","includes"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,SAAQC,QAAR,QAAuB,4CAAvB;AAEA,OAAOC,UAAP,MAAuB,gDAAvB;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA2B;AACzBI,EAAAA,WAAW,GAAE;AACX;;AADW,SAyBbC,YAzBa,GAyBGC,CAAD,IAAO;AACpB,WAAKC,QAAL,CAAc;AAACC,QAAAA,WAAW,EAAEF,CAAC,CAACG,MAAF,CAASC;AAAvB,OAAd;AACD,KA3BY;;AAEX,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,EADC;AACG;AACdJ,MAAAA,WAAW,EAAE;AAFF,KAAb,CAFW,CAMX;AACA;AACD,GATwB,CAWzB;;;AACAK,EAAAA,iBAAiB,GAAE;AACjB;AACAC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACA;AADA,KAEGC,IAFH,CAEQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFpB,EAGGF,IAHH,CAGQG,KAAK,IAAI,KAAKX,QAAL,CAAc;AAACK,MAAAA,QAAQ,EAAEM;AAAX,KAAd,CAHjB,EAFiB,CAKmC;AACrD,GAlBwB,CAoBzB;AACA;AACA;AACA;AACA;;;AAQAC,EAAAA,MAAM,GAAE;AACN;AACA;AACA;AACA;AAJM,wBAK4B,KAAKR,KALjC;AAAA,UAKEC,QALF,eAKEA,QALF;AAAA,UAKYJ,WALZ,eAKYA,WALZ;AAMN,UAAMY,gBAAgB,GAAGR,QAAQ,CAACS,MAAT,CACvBC,OAAO,IAAIA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,CAAoCjB,WAAW,CAACgB,WAAZ,EAApC,CADY,CAAzB;AAIA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AACC,MAAA,SAAS,EAAC,QADX;AAEC,MAAA,IAAI,EAAC,QAFN;AAGC,MAAA,WAAW,EAAC,qBAHb;AAIC,MAAA,YAAY,EAAE,KAAKnB,YAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOE,oBAAC,QAAD;AAAU,MAAA,QAAQ,EAAEe,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADF;AAYD;;AAtDwB;;AAyD3B,eAAejB,GAAf","sourcesContent":["import React, {Component} from 'react';\n\nimport {CardList} from \"./components/card-list/card-list.component\";\n\nimport SearchForm from './components/search-form/search-form.component';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters: [], // initial state is empty we wait until fetch completes\n      searchField: ''\n    };\n    //Binding this to handelChange\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  //Waits until our component mounts\n  componentDidMount(){\n    //fetch returns a promise.\n    fetch('https://jsonplaceholder.typicode.com/users')\n    //returns a new promise\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users})); //fills monsters state\n  }\n\n  // handleChange(e){\n  //   //Will not work because this is not set within a function. \n  //   //this has to be bound to the app component in our constructor\n  //   this.setState({searchField: e.target.value});\n  // }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n\n\n\n  render(){\n    // const monsters = this.state.monsters;\n    // const searchField = this.state.searchField;\n    //Destructruing is an easeir way of doing the above.\n    //Destrucuting allows you to pull properties from an object and set them to variables.\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(\n      monster => monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return(\n      <div className=\"App\">\n        <SearchForm \n         className=\"search\"\n         type=\"search\"\n         placeholder=\"Search Monsters....\" \n         handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}